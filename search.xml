<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SynchronousQueue实现原理</title>
      <link href="/2019/08/13/synchronousqueue-shi-xian-yuan-li/"/>
      <url>/2019/08/13/synchronousqueue-shi-xian-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="SynchronousQueue是什么？"><a href="#SynchronousQueue是什么？" class="headerlink" title="SynchronousQueue是什么？"></a>SynchronousQueue是什么？</h2><h2 id="SynchronousQueue有什么使用场景？"><a href="#SynchronousQueue有什么使用场景？" class="headerlink" title="SynchronousQueue有什么使用场景？"></a>SynchronousQueue有什么使用场景？</h2><h2 id="为什么要发明SynchronousQueue？"><a href="#为什么要发明SynchronousQueue？" class="headerlink" title="为什么要发明SynchronousQueue？"></a>为什么要发明SynchronousQueue？</h2><h2 id="SynchronousQueue是如何实现的？"><a href="#SynchronousQueue是如何实现的？" class="headerlink" title="SynchronousQueue是如何实现的？"></a>SynchronousQueue是如何实现的？</h2><h2 id="SynchronousQueue使用注意事项？"><a href="#SynchronousQueue使用注意事项？" class="headerlink" title="SynchronousQueue使用注意事项？"></a>SynchronousQueue使用注意事项？</h2>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> 并发编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Builder模式与JavaBean模式的比较</title>
      <link href="/2019/06/05/builder-mo-shi-yu-javabean-mo-shi-de-bi-jiao/"/>
      <url>/2019/06/05/builder-mo-shi-yu-javabean-mo-shi-de-bi-jiao/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>《Effective Java》之条目2：当构造参数过多时使用Builder模式</strong></p></blockquote><h4 id="1-为什么这样建议？"><a href="#1-为什么这样建议？" class="headerlink" title="1. 为什么这样建议？"></a>1. 为什么这样建议？</h4><ul><li>构造参数太多，创建对象时需要记住各个构造参数的作用以及位置。除非看文档，否则极容易出错</li><li>代码可读性差（阅读代码时无法立刻通过变量名了解各个构造参数的作用）</li></ul><h4 id="2-为什么不建议使用Java-Bean？"><a href="#2-为什么不建议使用Java-Bean？" class="headerlink" title="2. 为什么不建议使用Java Bean？"></a>2. 为什么不建议使用Java Bean？</h4><ul><li><p><strong><em>构造方法</em></strong>在多次调用中被分割，可能会导致JavaBean处于不一致的状态（线程不安全）</p><pre class="line-numbers language-java"><code class="language-java">NutritionFacts cocaCola <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setServingSize</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setServings</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setCalories</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setSodium</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setCarbohydrate</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>无法构建<strong><em>不可变对象(immutable)</em></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 因为用final修饰变量必须要初始化</span>  <span class="token comment" spellcheck="true">// 要么在定义时初始化，要么在构造函数中初始化</span>  <span class="token comment" spellcheck="true">// 一旦初始化完成即不可变，所以无法通过JavaBean setter方法初始化</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String id <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String name <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> id<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-为什么建议使用Builder模式？"><a href="#3-为什么建议使用Builder模式？" class="headerlink" title="3. 为什么建议使用Builder模式？"></a>3. 为什么建议使用Builder模式？</h4><ul><li><p>代码可读高，易于构建对象</p></li><li><p>不同于JavaBean模式，可构建<strong><em>不可变对象(immutable)</em></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//  必需变量</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  可选变量</span>  <span class="token keyword">private</span> String address<span class="token punctuation">;</span>  <span class="token keyword">private</span> String email<span class="token punctuation">;</span>  <span class="token keyword">private</span> String job<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//  builder</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Builder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  与Person成员变量相同</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> String job<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Builder</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Builder <span class="token function">address</span><span class="token punctuation">(</span>String address<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> address<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> Builder <span class="token function">email</span><span class="token punctuation">(</span>String email<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> Builder <span class="token function">job</span><span class="token punctuation">(</span>String job<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> Person <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>Builder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> builder<span class="token punctuation">.</span>id<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> builder<span class="token punctuation">.</span>name<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>address <span class="token operator">=</span> builder<span class="token punctuation">.</span>address<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> builder<span class="token punctuation">.</span>email<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> builder<span class="token punctuation">.</span>job<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//  构建Person对象</span>      Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Builder</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token string">"address"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">job</span><span class="token punctuation">(</span><span class="token string">"job"</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-还有其他解决方式吗？"><a href="#4-还有其他解决方式吗？" class="headerlink" title="4. 还有其他解决方式吗？"></a>4. 还有其他解决方式吗？</h4><ul><li>使用JavaBean模式，但是在所有构建方法未完成时，冻结对象（暂时无法使用该对象）<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 加锁</span>NutritionFacts cocaCola <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NutritionFacts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setServingSize</span><span class="token punctuation">(</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setServings</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setCalories</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setSodium</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cocaCola<span class="token punctuation">.</span><span class="token function">setCarbohydrate</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 释放锁</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><ul><li>JavaBean确实能解决问题，但是又会引起了新的问题(线程不安全与无法构建不可变对象)</li><li>Builder模式解决了问题，且不会出现JavaBean那样的副作用</li><li><strong><em>Builder模式缺点:</em></strong><ul><li>构建对象时，必须先构建Builder对象，有性能损耗</li><li>比伸缩构造方法模式更冗长，因此只有在有足够的参数时才值得使用它，比如四个或更多</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Effective Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次面试总结</title>
      <link href="/2019/03/16/ji-yi-ci-mian-shi-zong-jie/"/>
      <url>/2019/03/16/ji-yi-ci-mian-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>前段时间面试了一家大厂，面试官问很多关于操作系统以及网络原理之类理论知识。</p><p><strong>面试官在你正确回答问题后，接下来则是这样一个套路：</strong></p><div id="flowchart-0" class="flow-chart"></div>这样的套路不正是我们学习新知识应该遵循的过程吗？但是并不是每个人每个知识点都应用了这样的套路，我也不例外。自然有些问题回答的不是特别完美。<p><strong>总结：学习新知识点要时刻谨记该套路，学习过程中反复自问。</strong></p><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">q1=>operation: 为什么会提出这个概念或原理？q2=>operation: 解决了什么样的问题？q3=>operation: 还有其他解决方式吗？q1->q2->q3</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2019/01/23/test/"/>
      <url>/2019/01/23/test/</url>
      
        <content type="html"><![CDATA[<h1 id="THIS-IS-TEST"><a href="#THIS-IS-TEST" class="headerlink" title="THIS IS TEST"></a>THIS IS TEST</h1><h2 id="THIS-IS-TEST-1"><a href="#THIS-IS-TEST-1" class="headerlink" title="THIS IS TEST"></a>THIS IS TEST</h2><h3 id="THIS-IS-TEST-2"><a href="#THIS-IS-TEST-2" class="headerlink" title="THIS IS TEST"></a>THIS IS TEST</h3><h4 id="THIS-IS-TEST-3"><a href="#THIS-IS-TEST-3" class="headerlink" title="THIS IS TEST"></a>THIS IS TEST</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"THIS IS TEST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GOOD"><a href="#GOOD" class="headerlink" title="GOOD!!!"></a>GOOD!!!</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
